// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phone         String?
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  diseaseReports     DiseaseReport[]
  soilHealthReports  SoilHealthReport[]
  weatherQueries     WeatherQuery[]
  commodityQueries   CommodityQuery[]
  gptAlerts          GptAlert[]

  @@map("users")
  @@index([email])
}

model DiseaseReport {
  id              String    @id @default(uuid())
  userId          String
  cropName        String
  diseaseDetected String
  region          String
  severity        String
  diagnosisDate   DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])

  @@map("disease_reports")
  @@index([userId])
}

model SoilHealthReport {
  id            String    @id @default(uuid())
  userId        String
  ph            Float
  nitrogen      Float
  phosphorus    Float
  potassium     Float
  organicMatter Float
  region        String
  submittedAt   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id])

  @@map("soil_health_reports")
  @@index([userId])
}

model WeatherQuery {
  id          String    @id @default(uuid())
  userId      String
  location    String
  crop        String?
  queriedAt   DateTime  @default(now())
  gptAdvice   String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("weather_queries")
  @@index([userId])
}

model CommodityQuery {
  id          String    @id @default(uuid())
  userId      String
  cropName    String
  region      String
  dateRange   String
  queriedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("commodity_queries")
  @@index([userId])
}

model GptAlert {
  id          String    @id @default(uuid())
  userId      String
  title       String
  summary     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("gpt_alerts")
  @@index([userId])
}
